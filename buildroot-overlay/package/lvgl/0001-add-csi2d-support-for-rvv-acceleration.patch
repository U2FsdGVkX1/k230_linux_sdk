From 8674fbb3056c91e636d3dcc63080c78076ae1ff1 Mon Sep 17 00:00:00 2001
From: abing <abing@linux.alibaba.com>
Date: Fri, 26 Jul 2024 16:38:14 +0800
Subject: [PATCH] add csi2d support for rvv accelerateion

---
 lvgl/src/draw/csi2d/csi2d.h          |  72 ++++++
 lvgl/src/draw/csi2d/lv_draw_csi2d.mk |   6 +
 lvgl/src/draw/csi2d/lv_gpu_csi2d.c   | 414 ++++++++++++++++++++++++++++++++
 lvgl/src/draw/csi2d/lv_gpu_csi2d.h   |  51 ++++
 lvgl/src/draw/lv_draw.mk             |   1 +
 lvgl/src/hal/lv_hal_disp.c           |   5 +
 6 files changed, 549 insertions(+)
 create mode 100644 lvgl/src/draw/csi2d/csi2d.h
 create mode 100644 lvgl/src/draw/csi2d/lv_draw_csi2d.mk
 create mode 100644 lvgl/src/draw/csi2d/lv_gpu_csi2d.c
 create mode 100644 lvgl/src/draw/csi2d/lv_gpu_csi2d.h

diff --git a/lvgl/src/draw/csi2d/csi2d.h b/lvgl/src/draw/csi2d/csi2d.h
new file mode 100644
index 000000000..42d477c4b
--- /dev/null
+++ b/lvgl/src/draw/csi2d/csi2d.h
@@ -0,0 +1,72 @@
+/*
+ * Copyright (C) 2022 Alibaba Group Holding Limited
+ */
+
+#ifndef _CSI_2D_DIRECT_H_
+#define _CSI_2D_DIRECT_H_
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif
+
+#include <stdint.h>
+
+
+void csi_2d_argb8888_copy_row(uint32_t *dst, const uint32_t *src, int count);
+
+void csi_2d_argb8888_copy_with_opacity_row(uint32_t *dst, const uint32_t *src, uint8_t opacity, int count);
+
+void csi_2d_argb8888_copy_with_mask_row(uint32_t *dst, const uint32_t *src, const uint8_t *mask, int count);
+
+void csi_2d_argb8888_copy_with_mask_with_opacity_row(uint32_t *dst, const uint32_t *src, const uint8_t *mask, uint8_t opacity, int count);
+
+
+void csi_2d_argb8888_blending_row(uint32_t *dst, const uint32_t *src, int count);
+
+void csi_2d_argb8888_blending_with_opacity_row(uint32_t *dst, const uint32_t *src, uint8_t opacity, int count);
+
+void csi_2d_argb8888_fill_color_row(uint32_t *dst, uint32_t color, int count);
+
+void csi_2d_argb8888_fill_color_with_srcmask_row(uint32_t *dst, const uint32_t *src, uint32_t color, int count);
+
+void csi_2d_argb8888_fill_color_with_opacity_row(uint32_t *dst, uint32_t color, uint8_t opacity, int count);
+
+void csi_2d_argb8888_fill_color_with_mask_row(uint32_t *dst, const uint8_t *mask, uint32_t color, int count);
+
+void csi_2d_argb8888_fill_color_with_mask_with_opacity_row(uint32_t *dst, const uint8_t *mask, uint32_t color, uint8_t opacity, int count);
+
+
+
+void csi_2d_argb8888_fill_color(uint32_t *dst, int dst_stride, uint32_t color, int width, int height);
+
+void csi_2d_argb8888_fill_color_with_opacity(uint32_t *dst, int dst_stride, uint32_t color, uint8_t opacity, int count);
+
+void csi_2d_argb8888_fill_color_with_mask(uint32_t *dst, int dst_stride, const uint8_t *mask, int mask_stride, uint32_t color, int width, int height);
+
+void csi_2d_argb8888_fill_color_with_opacity_and_mask(uint32_t *dst, int dst_stride, const uint8_t *mask, int mask_stride, uint32_t color, uint8_t opacity, int width, int height);
+
+
+
+
+
+void csi_2d_rgb32_transform_bilinear_row(const uint8_t *src, int rb, const uint32_t *xy, int count, uint32_t *dst,
+                                            unsigned alpha);
+
+void csi_2d_rgb32_transform_bilinear_row_xy(const uint8_t *src, int rb, const uint32_t *xy, int count, uint32_t *dst,
+                               unsigned alpha);
+
+void csi_2d_rgb32_gen_xy_row(int fx, int fy, int dx, int dy, int maxX, int maxY, int oneX, int oneY, uint32_t *xy, int count);
+
+void csi_2d_rgb32_gen_x_row(int fx, int dx, int maxX, int oneX, uint32_t *xy, int count);
+
+void csi_2d_rgb32_transform_nofliter_row(const uint8_t *s, const uint32_t *xy, int count, uint32_t *dst,
+                               unsigned alpha);
+
+void csi_2d_rgb32_to_argb4444_with_rotate_270(uint16_t *dst, uint32_t *src, int dst_stride, int src_stride, int width, int height);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
\ No newline at end of file
diff --git a/lvgl/src/draw/csi2d/lv_draw_csi2d.mk b/lvgl/src/draw/csi2d/lv_draw_csi2d.mk
new file mode 100644
index 000000000..ce9ce8122
--- /dev/null
+++ b/lvgl/src/draw/csi2d/lv_draw_csi2d.mk
@@ -0,0 +1,6 @@
+CSRCS += lv_gpu_csi2d.c
+
+DEPPATH += --dep-path $(LVGL_DIR)/$(LVGL_DIR_NAME)/src/draw/csi2d
+VPATH += :$(LVGL_DIR)/$(LVGL_DIR_NAME)/src/draw/csi2d
+
+CFLAGS += "-I$(LVGL_DIR)/$(LVGL_DIR_NAME)/src/draw/csi2d"
diff --git a/lvgl/src/draw/csi2d/lv_gpu_csi2d.c b/lvgl/src/draw/csi2d/lv_gpu_csi2d.c
new file mode 100644
index 000000000..556536494
--- /dev/null
+++ b/lvgl/src/draw/csi2d/lv_gpu_csi2d.c
@@ -0,0 +1,414 @@
+/**
+ * @file lv_gpu_csi2d.c
+ *
+ */
+
+/*********************
+ *      INCLUDES
+ *********************/
+
+#include "lv_gpu_csi2d.h"
+#include "../../core/lv_refr.h"
+
+#if LV_USE_GPU_CSI2D
+#include "csi2d.h"
+
+/**********************
+ *      MACROS
+ **********************/
+#define FILL_NORMAL_MASK_PX(color)                                                          \
+    if(*mask == LV_OPA_COVER) *dest_buf = color;                                 \
+    else *dest_buf = lv_color_mix(color, *dest_buf, *mask);            \
+    mask++;                                                         \
+    dest_buf++;
+
+#define MAP_NORMAL_MASK_PX(x)                                                          \
+    if(*mask_tmp_x) {          \
+        if(*mask_tmp_x == LV_OPA_COVER) dest_buf[x] = src_buf[x];                                 \
+        else dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], *mask_tmp_x);            \
+    }                                                                                               \
+    mask_tmp_x++;
+
+
+static void _csi2d_blend(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc);
+static void lv_gpu_csi2d_wait_cb(lv_draw_ctx_t * draw_ctx);
+
+void lv_draw_csi2d_ctx_init(lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx)
+{
+    lv_draw_sw_init_ctx(drv, draw_ctx);
+
+    lv_draw_csi2d_ctx_t * csi2d_draw_ctx = (lv_draw_sw_ctx_t *)draw_ctx;
+
+    csi2d_draw_ctx->blend                     = _csi2d_blend;
+    csi2d_draw_ctx->base_draw.wait_for_finish = lv_gpu_csi2d_wait_cb;
+}
+
+void lv_draw_csi2d_ctx_deinit(lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx)
+{
+    LV_UNUSED(drv);
+    LV_UNUSED(draw_ctx);
+}
+
+static void lv_gpu_csi2d_wait_cb(lv_draw_ctx_t * draw_ctx)
+{
+    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
+
+    if(disp->driver && disp->driver->wait_cb) {
+        disp->driver->wait_cb(disp->driver);
+    }
+    lv_draw_sw_wait_for_finish(draw_ctx);
+}
+
+static void csi2d_fill_normal(lv_color_t * dest_buf, const lv_area_t * dest_area,
+                                              lv_coord_t dest_stride, lv_color_t color, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)
+{
+    int32_t w = lv_area_get_width(dest_area);
+    int32_t h = lv_area_get_height(dest_area);
+
+    int32_t x;
+    int32_t y;
+
+    /*No mask*/
+    if(mask == NULL) {
+        if(opa >= LV_OPA_MAX) {
+            for(y = 0; y < h; y++) {
+#if LV_COLOR_DEPTH == 32
+                csi_2d_argb8888_fill_color_row((uint32_t*)dest_buf, color.full, w);
+#else
+                lv_color_fill(dest_buf, color, w);
+#endif
+                dest_buf += dest_stride;
+            }
+        }
+        /*Has opacity*/
+        else {
+            lv_color_t last_dest_color = lv_color_black();
+            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
+
+#if LV_COLOR_MIX_ROUND_OFS == 0 && LV_COLOR_DEPTH == 16
+            /*lv_color_mix work with an optimized algorithm with 16 bit color depth.
+             *However, it introduces some rounded error on opa.
+             *Introduce the same error here too to make lv_color_premult produces the same result */
+            opa = (uint32_t)((uint32_t)opa + 4) >> 3;
+            opa = opa << 3;
+#endif
+
+            uint16_t color_premult[3];
+            lv_color_premult(color, opa, color_premult);
+            lv_opa_t opa_inv = 255 - opa;
+
+            for(y = 0; y < h; y++) {
+#if LV_COLOR_DEPTH == 32
+                csi_2d_argb8888_fill_color_with_opacity_row((uint32_t*)dest_buf, color.full, opa, w);
+#else
+                for(x = 0; x < w; x++) {
+                    if(last_dest_color.full != dest_buf[x].full) {
+                        last_dest_color = dest_buf[x];
+                        last_res_color = lv_color_mix_premult(color_premult, dest_buf[x], opa_inv);
+                    }
+                    dest_buf[x] = last_res_color;
+                }
+#endif
+                dest_buf += dest_stride;
+            }
+        }
+    }
+    /*Masked*/
+    else {
+#if LV_COLOR_DEPTH == 16
+        uint32_t c32 = color.full + ((uint32_t)color.full << 16);
+#endif
+        /*Only the mask matters*/
+        if(opa >= LV_OPA_MAX) {
+            int32_t x_end4 = w - 4;
+            for(y = 0; y < h; y++) {
+#if LV_COLOR_DEPTH == 32
+                csi_2d_argb8888_fill_color_with_mask_row((uint32_t*)dest_buf, mask, color.full, w);
+                dest_buf += dest_stride;
+                mask += mask_stride;
+#else
+                for(x = 0; x < w && ((lv_uintptr_t)(mask) & 0x3); x++) {
+                    FILL_NORMAL_MASK_PX(color)
+                }
+
+                for(; x <= x_end4; x += 4) {
+                    uint32_t mask32 = *((uint32_t *)mask);
+                    if(mask32 == 0xFFFFFFFF) {
+#if LV_COLOR_DEPTH == 16
+                        if((lv_uintptr_t)dest_buf & 0x3) {
+                            *(dest_buf + 0) = color;
+                            uint32_t * d = (uint32_t *)(dest_buf + 1);
+                            *d = c32;
+                            *(dest_buf + 3) = color;
+                        }
+                        else {
+                            uint32_t * d = (uint32_t *)dest_buf;
+                            *d = c32;
+                            *(d + 1) = c32;
+                        }
+#else
+                        dest_buf[0] = color;
+                        dest_buf[1] = color;
+                        dest_buf[2] = color;
+                        dest_buf[3] = color;
+#endif
+                        dest_buf += 4;
+                        mask += 4;
+                    }
+                    else if(mask32) {
+                        FILL_NORMAL_MASK_PX(color)
+                        FILL_NORMAL_MASK_PX(color)
+                        FILL_NORMAL_MASK_PX(color)
+                        FILL_NORMAL_MASK_PX(color)
+                    }
+                    else {
+                        mask += 4;
+                        dest_buf += 4;
+                    }
+                }
+
+                for(; x < w ; x++) {
+                    FILL_NORMAL_MASK_PX(color)
+                }
+                dest_buf += (dest_stride - w);
+                mask += (mask_stride - w);
+#endif
+            }
+        }
+        /*With opacity*/
+        else {
+            /*Buffer the result color to avoid recalculating the same color*/
+            lv_color_t last_dest_color;
+            lv_color_t last_res_color;
+            lv_opa_t last_mask = LV_OPA_TRANSP;
+            last_dest_color.full = dest_buf[0].full;
+            last_res_color.full = dest_buf[0].full;
+            lv_opa_t opa_tmp = LV_OPA_TRANSP;
+
+            for(y = 0; y < h; y++) {
+#if LV_COLOR_DEPTH == 32
+                csi_2d_argb8888_fill_color_with_mask_with_opacity_row((uint32_t*)dest_buf,  mask, color.full, opa, w);
+                dest_buf += dest_stride;
+                mask += mask_stride;
+#else
+                for(x = 0; x < w; x++) {
+                    if(*mask) {
+                        if(*mask != last_mask) opa_tmp = *mask == LV_OPA_COVER ? opa :
+                                                             (uint32_t)((uint32_t)(*mask) * opa) >> 8;
+                        if(*mask != last_mask || last_dest_color.full != dest_buf[x].full) {
+                            if(opa_tmp == LV_OPA_COVER) last_res_color = color;
+                            else last_res_color = lv_color_mix(color, dest_buf[x], opa_tmp);
+                            last_mask = *mask;
+                            last_dest_color.full = dest_buf[x].full;
+                        }
+                        dest_buf[x] = last_res_color;
+                    }
+                    mask++;
+                }
+
+                dest_buf += dest_stride;
+                mask += (mask_stride - w);
+#endif
+            }
+        }
+    }
+}
+
+static void csi2d_map_normal(lv_color_t * dest_buf, const lv_area_t * dest_area, lv_coord_t dest_stride,
+                                             const lv_color_t * src_buf, lv_coord_t src_stride, lv_opa_t opa, const lv_opa_t * mask, lv_coord_t mask_stride)
+
+{
+    int32_t w = lv_area_get_width(dest_area);
+    int32_t h = lv_area_get_height(dest_area);
+
+    int32_t x;
+    int32_t y;
+
+    /*Simple fill (maybe with opacity), no masking*/
+    if(mask == NULL) {
+        if(opa >= LV_OPA_MAX) {
+            for(y = 0; y < h; y++) {
+                csi_2d_argb8888_copy_row((uint32_t*)dest_buf, (uint32_t*)src_buf, w);
+                dest_buf += dest_stride;
+                src_buf += src_stride;
+            }
+        }
+        else {
+            for(y = 0; y < h; y++) {
+#if LV_COLOR_DEPTH == 32
+                csi_2d_argb8888_copy_with_opacity_row((uint32_t*)dest_buf, (uint32_t*)src_buf, opa, w);
+#else
+                for(x = 0; x < w; x++) {
+                    dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa);
+                }
+#endif
+                dest_buf += dest_stride;
+                src_buf += src_stride;
+            }
+        }
+    }
+    /*Masked*/
+    else {
+        /*Only the mask matters*/
+        if(opa > LV_OPA_MAX) {
+            int32_t x_end4 = w - 4;
+
+            for(y = 0; y < h; y++) {
+                const lv_opa_t * mask_tmp_x = mask;
+#if 0
+                for(x = 0; x < w; x++) {
+                    MAP_NORMAL_MASK_PX(x);
+                }
+#else
+#if LV_COLOR_DEPTH == 32
+                csi_2d_argb8888_copy_with_mask_row((uint32_t*)dest_buf, (uint32_t*)src_buf, mask, w);
+#else
+                for(x = 0; x < w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
+                    MAP_NORMAL_MASK_PX(x)
+                }
+
+                uint32_t * mask32 = (uint32_t *)mask_tmp_x;
+                for(; x < x_end4; x += 4) {
+                    if(*mask32) {
+                        if((*mask32) == 0xFFFFFFFF) {
+                            dest_buf[x] = src_buf[x];
+                            dest_buf[x + 1] = src_buf[x + 1];
+                            dest_buf[x + 2] = src_buf[x + 2];
+                            dest_buf[x + 3] = src_buf[x + 3];
+                        }
+                        else {
+                            mask_tmp_x = (const lv_opa_t *)mask32;
+                            MAP_NORMAL_MASK_PX(x)
+                            MAP_NORMAL_MASK_PX(x + 1)
+                            MAP_NORMAL_MASK_PX(x + 2)
+                            MAP_NORMAL_MASK_PX(x + 3)
+                        }
+                    }
+                    mask32++;
+                }
+
+                mask_tmp_x = (const lv_opa_t *)mask32;
+                for(; x < w ; x++) {
+                    MAP_NORMAL_MASK_PX(x)
+                }
+#endif
+#endif
+                dest_buf += dest_stride;
+                src_buf += src_stride;
+                mask += mask_stride;
+            }
+        }
+        /*Handle opa and mask values too*/
+        else {
+            for(y = 0; y < h; y++) {
+#if LV_COLOR_DEPTH == 32
+                csi_2d_argb8888_copy_with_mask_with_opacity_row((uint32_t*)dest_buf, (uint32_t*)src_buf, (uint8_t*)mask, opa, w);
+#else
+                for(x = 0; x < w; x++) {
+                    if(mask[x]) {
+                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
+                        dest_buf[x] = lv_color_mix(src_buf[x], dest_buf[x], opa_tmp);
+                    }
+                }
+#endif
+                dest_buf += dest_stride;
+                src_buf += src_stride;
+                mask += mask_stride;
+            }
+        }
+    }
+}
+
+static void _csi2d_blend(lv_draw_ctx_t * draw_ctx, const lv_draw_sw_blend_dsc_t * dsc)
+{
+    const lv_opa_t * mask;
+    if(dsc->mask_buf == NULL) mask = NULL;
+    if(dsc->mask_buf && dsc->mask_res == LV_DRAW_MASK_RES_TRANSP)
+        return;
+    else if(dsc->mask_res == LV_DRAW_MASK_RES_FULL_COVER)
+        mask = NULL;
+    else
+        mask = dsc->mask_buf;
+
+    lv_coord_t dest_stride = lv_area_get_width(draw_ctx->buf_area);
+
+    lv_area_t blend_area;
+    if(!_lv_area_intersect(&blend_area, dsc->blend_area, draw_ctx->clip_area)) return;
+
+    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
+
+    bool is_accelerated = false;
+    do {
+        if(NULL != disp->driver->set_px_cb) {
+            return;
+        }
+
+        lv_color_t * dest_buf = draw_ctx->buf;
+        dest_buf += dest_stride * (blend_area.y1 - draw_ctx->buf_area->y1) + (blend_area.x1 - draw_ctx->buf_area->x1);
+
+        const lv_color_t * src_buf = dsc->src_buf;
+        lv_coord_t src_stride;
+        if(src_buf) {
+            src_stride = lv_area_get_width(dsc->blend_area);
+            src_buf += src_stride * (blend_area.y1 - dsc->blend_area->y1) + (blend_area.x1 - dsc->blend_area->x1);
+        } else {
+            src_stride = 0;
+        }
+
+        lv_coord_t mask_stride;
+        if(mask) {
+            mask_stride = lv_area_get_width(dsc->mask_area);
+            mask += mask_stride * (blend_area.y1 - dsc->mask_area->y1) + (blend_area.x1 - dsc->mask_area->x1);
+        } else {
+            mask_stride = 0;
+        }
+
+        lv_area_move(&blend_area, -draw_ctx->buf_area->x1, -draw_ctx->buf_area->y1);
+#if LV_COLOR_SCREEN_TRANSP
+        if(disp->driver->screen_transp) {
+                    is_accelerated = true;
+        } else 
+#endif
+        if(dsc->blend_mode == LV_BLEND_MODE_NORMAL) {
+
+
+            if(dsc->src_buf == NULL) {
+                csi2d_fill_normal(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
+                is_accelerated = true;
+            }
+            else {
+                csi2d_map_normal(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride);
+                is_accelerated = true;
+            }
+        } else {
+                    is_accelerated = true;
+
+        }
+// #if LV_COLOR_SCREEN_TRANSP
+//         else if(disp->driver->screen_transp) {
+//             if(dsc->src_buf == NULL) {
+//                 fill_argb(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride);
+//             }
+//             else {
+//                 map_argb(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
+//             }
+//         }
+// #endif
+
+// #if LV_DRAW_COMPLEX
+//         else {
+//             if(dsc->src_buf == NULL) {
+//                 fill_blended(dest_buf, &blend_area, dest_stride, dsc->color, dsc->opa, mask, mask_stride, dsc->blend_mode);
+//             }
+//             else {
+//                 map_blended(dest_buf, &blend_area, dest_stride, src_buf, src_stride, dsc->opa, mask, mask_stride, dsc->blend_mode);
+//             }
+//         }
+// #endif
+    } while(0);
+
+    if(!is_accelerated) {
+        lv_draw_sw_blend_basic(draw_ctx, dsc);
+    }
+}
+#endif
diff --git a/lvgl/src/draw/csi2d/lv_gpu_csi2d.h b/lvgl/src/draw/csi2d/lv_gpu_csi2d.h
new file mode 100644
index 000000000..3d077906c
--- /dev/null
+++ b/lvgl/src/draw/csi2d/lv_gpu_csi2d.h
@@ -0,0 +1,51 @@
+/**
+ * @file lv_gpu_arm2d.h
+ *
+ */
+
+#ifndef LV_GPU_CSI2D_H
+#define LV_GPU_CSI2D_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/*********************
+ *      INCLUDES
+ *********************/
+#include "../../misc/lv_color.h"
+#include "../../hal/lv_hal_disp.h"
+#include "../sw/lv_draw_sw.h"
+
+#if LV_USE_GPU_CSI2D
+
+/*********************
+ *      DEFINES
+ *********************/
+
+/**********************
+ *      TYPEDEFS
+ **********************/
+typedef lv_draw_sw_ctx_t lv_draw_csi2d_ctx_t;
+
+struct _lv_disp_drv_t;
+
+/**********************
+ * GLOBAL PROTOTYPES
+ **********************/
+
+void lv_draw_csi2d_ctx_init(struct _lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx);
+
+void lv_draw_csi2d_ctx_deinit(struct _lv_disp_drv_t * drv, lv_draw_ctx_t * draw_ctx);
+
+/**********************
+ *      MACROS
+ **********************/
+
+#endif  /*LV_USE_GPU_CSI2D*/
+
+#ifdef __cplusplus
+} /*extern "C"*/
+#endif
+
+#endif /*LV_GPU_CSI2D_H*/
diff --git a/lvgl/src/draw/lv_draw.mk b/lvgl/src/draw/lv_draw.mk
index f48f48fe0..2ca2c73aa 100644
--- a/lvgl/src/draw/lv_draw.mk
+++ b/lvgl/src/draw/lv_draw.mk
@@ -17,6 +17,7 @@ VPATH += :$(LVGL_DIR)/$(LVGL_DIR_NAME)/src/draw
 
 CFLAGS += "-I$(LVGL_DIR)/$(LVGL_DIR_NAME)/src/draw"
 
+include $(LVGL_DIR)/$(LVGL_DIR_NAME)/src/draw/csi2d/lv_draw_csi2d.mk
 include $(LVGL_DIR)/$(LVGL_DIR_NAME)/src/draw/arm2d/lv_draw_arm2d.mk
 include $(LVGL_DIR)/$(LVGL_DIR_NAME)/src/draw/nxp/lv_draw_nxp.mk
 include $(LVGL_DIR)/$(LVGL_DIR_NAME)/src/draw/sdl/lv_draw_sdl.mk
diff --git a/lvgl/src/hal/lv_hal_disp.c b/lvgl/src/hal/lv_hal_disp.c
index 10640a28a..04d868a71 100644
--- a/lvgl/src/hal/lv_hal_disp.c
+++ b/lvgl/src/hal/lv_hal_disp.c
@@ -23,6 +23,7 @@
 #include "../draw/stm32_dma2d/lv_gpu_stm32_dma2d.h"
 #include "../draw/swm341_dma2d/lv_gpu_swm341_dma2d.h"
 #include "../draw/arm2d/lv_gpu_arm2d.h"
+#include "../draw/csi2d/lv_gpu_csi2d.h"
 #include "../draw/nxp/vglite/lv_draw_vglite.h"
 #include "../draw/nxp/pxp/lv_draw_pxp.h"
 
@@ -120,6 +121,10 @@ void lv_disp_drv_init(lv_disp_drv_t * driver)
     driver->draw_ctx_init = lv_draw_arm2d_ctx_init;
     driver->draw_ctx_deinit = lv_draw_arm2d_ctx_init;
     driver->draw_ctx_size = sizeof(lv_draw_arm2d_ctx_t);
+#elif LV_USE_GPU_CSI2D
+    driver->draw_ctx_init = lv_draw_csi2d_ctx_init;
+    driver->draw_ctx_deinit = lv_draw_csi2d_ctx_init;
+    driver->draw_ctx_size = sizeof(lv_draw_csi2d_ctx_t);
 #else
     driver->draw_ctx_init = lv_draw_sw_init_ctx;
     driver->draw_ctx_deinit = lv_draw_sw_init_ctx;
-- 
2.25.1

